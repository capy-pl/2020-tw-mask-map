{"version":3,"sources":["icons/mask-enough.svg","icons/mask-none.svg","icons/mask-under-ten.svg","util.ts","Map.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","cleanDateString","str","length","Date","toLocaleTimeString","calcCrow","lat1","lon1","lat2","lon2","dLat","toRad","dLon","lat1Rad","lat2Rad","a","Math","sin","cos","atan2","sqrt","Value","PI","getPosition","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","GoogleMap","rootRef","React","createRef","legendRef","map","markers","Map","currentOpen","changeCenter","position","panTo","lat","coords","latitude","lng","longitude","onCenterChange","previousTrigger","currentTrigger","getTime","drawMarkers","sortedMap","sortedDistanceMap","slice","notInList","forEach","marker","id","includes","setMap","push","index","delete","drawMarker","has","get","pharmacy","props","pharmacies","adultMaskAvailable","maskSituation","properties","mask_adult","childMaskAvailable","mask_child","icon","url","getIcon","scaledSize","google","maps","Size","contentString","name","getCellClass","address","phone","updated","infowindow","InfoWindow","content","Marker","geometry","coordinates","cursor","addListener","close","open","set","this","current","opt","streetViewControl","zoomControl","mapTypeControl","fullscreenControl","center","zoom","controls","ControlPosition","RIGHT_TOP","indexList","i","sort","ph1","ph2","plng1","plat1","plng2","plat2","getCenter","toJSON","ph1Distance","ph2Distance","num","situation1","situation2","MaskEnoughIcon","MaskUnderTen","MaskNone","situation","ref","Segment","compact","List","verticalAlign","Item","Image","src","size","Content","Header","Button","style","zIndex","labelPosition","color","onClick","className","Icon","toggleMapView","PureComponent","App","timer","lastSearchResult","pageLimit","state","ajaxError","notFoundError","loading","searchValue","display","errMessage","nearest","currentPage","pageSize","hasNext","startPage","numberLeft","availableNums","pageNums","mapView","fetchData","axios","response","status","setState","data","features","updateList","searchString","searchAddress","element","document","createElement","href","target","click","renderPharmacy","Table","Row","key","Cell","Popup","trigger","link","marginLeft","renderPharmacyList","startIndex","endIndex","onSearchValueChange","e","value","toggleAdultMaskAvailable","toggleChildrenMaskAvailable","onSubmit","val","trim","sortByGeolocation","location","distanceMap","plongitude","platitude","distance","index1","index2","getPageOptions","text","toString","onPageSizeChange","event","ceil","changePage","previousPages","nextPages","interval","pageNum","updatePageNumber","window","setInterval","clearInterval","newLength","condition","matchList","validatePharmacy","isValid","items","max","Menu","active","as","Message","error","table","borderless","fixed","secondary","Form","Input","onChange","action","placeholder","celled","HeaderCell","colSpan","inverted","Dropdown","inline","options","defaultValue","Body","Footer","floated","pagination","disabled","renderPageItems","Dimmer","page","Loader","Boolean","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d40cf369.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mask-enough.ab4bc8c3.svg\";","module.exports = __webpack_public_path__ + \"static/media/mask-none.ff18c436.svg\";","module.exports = __webpack_public_path__ + \"static/media/mask-under-ten.875bbab2.svg\";","export function cleanDateString(str: string): string {\r\n  if (str.length) {\r\n    return new Date(str).toLocaleTimeString();\r\n  }\r\n  return \"無\";\r\n}\r\n\r\nexport function calcCrow(\r\n  lat1: number,\r\n  lon1: number,\r\n  lat2: number,\r\n  lon2: number\r\n): number {\r\n  const R = 6371; // km\r\n  const dLat = toRad(lat2 - lat1);\r\n  const dLon = toRad(lon2 - lon1);\r\n  const lat1Rad = toRad(lat1);\r\n  const lat2Rad = toRad(lat2);\r\n\r\n  const a =\r\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n    Math.sin(dLon / 2) *\r\n      Math.sin(dLon / 2) *\r\n      Math.cos(lat1Rad) *\r\n      Math.cos(lat2Rad);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  const d = R * c;\r\n  return d;\r\n}\r\n\r\nfunction toRad(Value: number): number {\r\n  return (Value * Math.PI) / 180;\r\n}\r\n\r\nexport function getPosition(): Promise<Position> {\r\n  return new Promise((resolve, reject) => {\r\n    navigator.geolocation.getCurrentPosition(resolve, reject);\r\n  });\r\n}\r\n","import React from \"react\";\r\n\r\nimport { getPosition } from \"./util\";\r\nimport { Pharmacy } from \"./Model\";\r\nimport { calcCrow, cleanDateString } from \"./util\";\r\nimport MaskEnoughIcon from \"./icons/mask-enough.svg\";\r\nimport MaskNone from \"./icons/mask-none.svg\";\r\nimport MaskUnderTen from \"./icons/mask-under-ten.svg\";\r\nimport { Button, Icon, Segment, List, Image } from \"semantic-ui-react\";\r\n\r\ntype Props = {\r\n  pharmacies: Pharmacy[];\r\n  toggleMapView: () => void;\r\n};\r\n\r\ntype MaskSituation = \"enough\" | \"lessThanTen\" | \"none\";\r\n\r\nexport default class GoogleMap extends React.PureComponent<Props> {\r\n  public rootRef = React.createRef<HTMLDivElement>();\r\n  public legendRef = React.createRef<HTMLDivElement>();\r\n  private map?: google.maps.Map;\r\n  private markers: Map<number, google.maps.Marker> = new Map();\r\n  private currentOpen?: google.maps.InfoWindow;\r\n\r\n  public async componentDidMount() {\r\n    if (this.rootRef && this.rootRef.current) {\r\n      // auto calculate height.\r\n      const opt: google.maps.MapOptions = {\r\n        streetViewControl: false,\r\n        zoomControl: false,\r\n        mapTypeControl: false,\r\n        fullscreenControl: false\r\n      };\r\n      try {\r\n        const position = await getPosition();\r\n        opt.center = {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude\r\n        };\r\n        opt.zoom = 17;\r\n      } catch (err) {\r\n        opt.center = {\r\n          lat: 25.0451957,\r\n          lng: 121.5198828\r\n        };\r\n        opt.zoom = 11;\r\n      }\r\n      this.map = new google.maps.Map(this.rootRef.current, opt);\r\n      this.map.addListener(\"center_changed\", this.onCenterChange());\r\n      this.drawMarkers();\r\n      if (this.legendRef && this.legendRef.current) {\r\n        this.map.controls[google.maps.ControlPosition.RIGHT_TOP].push(\r\n          this.legendRef.current\r\n        );\r\n      }\r\n\r\n      // this.props.pharmacies.slice(0, 10).forEach(this.drawMarker);\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate() {\r\n    this.drawMarkers();\r\n  }\r\n\r\n  public changeCenter = async () => {\r\n    try {\r\n      if (this.map) {\r\n        const position = await getPosition();\r\n        this.map.panTo({\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude\r\n        });\r\n      }\r\n    } catch (err) {}\r\n  };\r\n\r\n  public onCenterChange = () => {\r\n    const interval = 100;\r\n    let previousTrigger = new Date();\r\n    return () => {\r\n      const currentTrigger = new Date();\r\n      if (currentTrigger.getTime() - previousTrigger.getTime() > interval) {\r\n        previousTrigger = currentTrigger;\r\n        this.drawMarkers();\r\n      }\r\n    };\r\n  };\r\n\r\n  public sortedDistanceMap(): number[] {\r\n    // Initialize a index list.\r\n    const indexList = [];\r\n    for (let i = 0; i < this.props.pharmacies.length; i++) {\r\n      indexList[i] = i;\r\n    }\r\n    if (this.map) {\r\n      indexList.sort((ph1, ph2) => {\r\n        const [plng1, plat1] = this.props.pharmacies[ph1].geometry.coordinates;\r\n        const [plng2, plat2] = this.props.pharmacies[ph2].geometry.coordinates;\r\n        const { lat, lng } = (this.map as google.maps.Map).getCenter().toJSON();\r\n        const ph1Distance = calcCrow(lat, lng, plat1, plng1);\r\n        const ph2Distance = calcCrow(lat, lng, plat2, plng2);\r\n        if (ph1Distance < ph2Distance) return -1;\r\n        if (ph1Distance === ph2Distance) return 0;\r\n        return 1;\r\n      });\r\n    }\r\n    return indexList;\r\n  }\r\n\r\n  public maskSituation(num: number): MaskSituation {\r\n    if (num > 10) return \"enough\";\r\n    if (num > 0) return \"lessThanTen\";\r\n    return \"none\";\r\n  }\r\n\r\n  public getIcon(situation1: MaskSituation, situation2: MaskSituation): string {\r\n    if (situation1 === \"enough\" || situation2 === \"enough\")\r\n      return MaskEnoughIcon;\r\n    if (situation1 === \"lessThanTen\" || situation2 === \"lessThanTen\")\r\n      return MaskUnderTen;\r\n    return MaskNone;\r\n  }\r\n\r\n  public getCellClass(situation: MaskSituation): string {\r\n    switch (situation) {\r\n      case \"enough\":\r\n        return \"positive\";\r\n      case \"lessThanTen\":\r\n        return \"warning\";\r\n      default:\r\n        return \"negative\";\r\n    }\r\n  }\r\n\r\n  public drawMarkers = () => {\r\n    const sortedMap = this.sortedDistanceMap().slice(0, 50);\r\n    // clear all previous markers\r\n    const notInList: number[] = [];\r\n    this.markers.forEach((marker, id) => {\r\n      if (!sortedMap.includes(id)) {\r\n        marker.setMap(null);\r\n        notInList.push(id);\r\n      }\r\n    });\r\n\r\n    notInList.forEach(index => {\r\n      this.markers.delete(index);\r\n    });\r\n\r\n    sortedMap.forEach(index => {\r\n      this.drawMarker(index);\r\n    });\r\n  };\r\n\r\n  public drawMarker = (index: number) => {\r\n    if (!this.markers.has(index)) {\r\n      const pharmacy: Pharmacy = this.props.pharmacies[index];\r\n      const adultMaskAvailable: MaskSituation = this.maskSituation(\r\n        pharmacy.properties.mask_adult\r\n      );\r\n      const childMaskAvailable: MaskSituation = this.maskSituation(\r\n        pharmacy.properties.mask_child\r\n      );\r\n\r\n      const icon: google.maps.Icon = {\r\n        url: this.getIcon(adultMaskAvailable, childMaskAvailable),\r\n        scaledSize: new google.maps.Size(40, 40)\r\n      };\r\n\r\n      const contentString = `\r\n        <div class=\"info-box\">\r\n          <h3 class=\"ui top attached header\">\r\n            ${pharmacy.properties.name}\r\n          </h3>\r\n          <table class=\"ui celled table compact\">\r\n          <tbody>\r\n          <tr>\r\n          <td class=\"collapsing ${this.getCellClass(\r\n            adultMaskAvailable\r\n          )}\">成人口罩庫存</td>\r\n          <td data-label=\"availabe adult masks\" class=\" ${this.getCellClass(\r\n            adultMaskAvailable\r\n          )} collapsing\">${pharmacy.properties.mask_adult}</td>\r\n        </tr>\r\n        <tr>\r\n          <td class=\"collapsing  ${this.getCellClass(\r\n            childMaskAvailable\r\n          )}\" >孩童口罩庫存</td>\r\n          <td data-label=\"available child masks\" class=\"${this.getCellClass(\r\n            childMaskAvailable\r\n          )} collapsing\">${pharmacy.properties.mask_child}</td>\r\n        </tr>\r\n            <tr class=\"collapsing\">\r\n              <td class=\"collapsing\">地址</td>\r\n              <td class=\"collapsing\" data-label=\"address\">${\r\n                pharmacy.properties.address\r\n              }</td>\r\n            </tr>\r\n            <tr class=\"collapsing\">\r\n              <td  class=\"collapsing\">電話</td>\r\n              <td class=\"collapsing\" data-label=\"phone number\">${\r\n                pharmacy.properties.phone\r\n              }</td>\r\n            </tr>\r\n            <tr>\r\n              <td class=\"collapsing\">最後更新時間</td>\r\n              <td class=\"collapsing\" data-label=\"last update\">${cleanDateString(\r\n                pharmacy.properties.updated || \"\"\r\n              )}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        </div>\r\n      `;\r\n\r\n      const infowindow = new google.maps.InfoWindow({\r\n        content: contentString\r\n      });\r\n\r\n      const marker = new google.maps.Marker({\r\n        position: {\r\n          lat: pharmacy.geometry.coordinates[1],\r\n          lng: pharmacy.geometry.coordinates[0]\r\n        },\r\n        icon,\r\n        cursor: \"pointer\",\r\n        map: this.map\r\n      });\r\n\r\n      marker.addListener(\"click\", () => {\r\n        if (this.currentOpen) {\r\n          this.currentOpen.close();\r\n        }\r\n        this.currentOpen = infowindow;\r\n        infowindow.open(this.map, marker);\r\n      });\r\n\r\n      this.markers.set(index, marker);\r\n    } else {\r\n      this.markers.get(index)?.setMap(this.map as google.maps.Map);\r\n    }\r\n  };\r\n\r\n  public render() {\r\n    return (\r\n      <>\r\n        <div id=\"legend\" ref={this.legendRef}>\r\n          <Segment compact>\r\n            <List verticalAlign=\"middle\">\r\n              <List.Item>\r\n                <Image src={MaskUnderTen} size=\"mini\" />\r\n                <List.Content>\r\n                  <List.Header>口罩供應小於１０</List.Header>\r\n                </List.Content>\r\n              </List.Item>\r\n              <List.Item>\r\n                <Image src={MaskEnoughIcon} size=\"mini\" />\r\n                <List.Content>\r\n                  <List.Header>口罩供應足夠</List.Header>\r\n                </List.Content>\r\n              </List.Item>\r\n              <List.Item>\r\n                <Image src={MaskNone} size=\"mini\" />\r\n                <List.Content>\r\n                  <List.Header>口罩售罄</List.Header>\r\n                </List.Content>\r\n              </List.Item>\r\n            </List>\r\n          </Segment>\r\n        </div>\r\n\r\n        <Button\r\n          style={{ zIndex: 40 }}\r\n          icon\r\n          labelPosition=\"left\"\r\n          color=\"facebook\"\r\n          onClick={this.changeCenter}\r\n          className=\"locate-icon\"\r\n        >\r\n          顯示我的位置\r\n          <Icon name=\"location arrow\" />\r\n        </Button>\r\n        <Button\r\n          style={{ zIndex: 40 }}\r\n          className=\"toggle-map-icon\"\r\n          onClick={this.props.toggleMapView}\r\n        >\r\n          切換文字選單\r\n        </Button>\r\n        <div id=\"map-root\" ref={this.rootRef}></div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import axios from \"axios\";\nimport React from \"react\";\nimport {\n  Button,\n  Dimmer,\n  Dropdown,\n  Icon,\n  DropdownProps,\n  Form,\n  Loader,\n  Input,\n  Menu,\n  Popup,\n  Segment,\n  Table,\n  Message\n} from \"semantic-ui-react\";\n\nimport { Pharmacy, PharmacyAjaxResponse } from \"./Model\";\nimport GoogleMap from \"./Map\";\nimport { cleanDateString, calcCrow, getPosition } from \"./util\";\n\nimport \"./App.css\";\n\ntype State = {\n  pharmacies: Pharmacy[];\n  ajaxError: boolean;\n  loading: boolean;\n  searchValue: string;\n  display: number[];\n  errMessage: string;\n  adultMaskAvailable: boolean;\n  childMaskAvailable: boolean;\n  nearest: boolean;\n  currentPage: number;\n  pageSize: number;\n  hasNext: boolean;\n  startPage: number;\n  numberLeft: number;\n  availableNums: number;\n  pageNums: number;\n  mapView: boolean;\n};\n\ntype Condition = {\n  childMaskAvailable?: boolean;\n  adultMaskAvailable?: boolean;\n  searchString?: string;\n};\n\nclass App extends React.PureComponent<{}, State> {\n  public timer?: number;\n  public lastSearchResult: string = \"\";\n  public pageLimit: number = 5;\n\n  public state = {\n    ajaxError: false,\n    notFoundError: false,\n    pharmacies: [],\n    loading: true,\n    searchValue: \"\",\n    display: [],\n    errMessage: \"\",\n    adultMaskAvailable: false,\n    childMaskAvailable: false,\n    nearest: false,\n    currentPage: 1,\n    pageSize: 15,\n    hasNext: false,\n    startPage: 1,\n    numberLeft: 0,\n    availableNums: 0,\n    pageNums: 0,\n    mapView: false\n  };\n\n  public async componentDidMount() {\n    // fetch data every 3 minutes.\n    const interval = 3 * 60 * 1000;\n    const pageNum = await this.fetchData();\n    this.updatePageNumber(pageNum);\n    this.timer = window.setInterval(this.fetchData, interval);\n  }\n\n  public componentWillUnmount() {\n    clearInterval(this.timer);\n    delete this.timer;\n  }\n\n  public fetchData = async () => {\n    const response = await axios.get<PharmacyAjaxResponse>(\n      \"https://raw.githubusercontent.com/kiang/pharmacies/master/json/points.json\"\n    );\n\n    if (response.status >= 400) {\n      this.setState({\n        ajaxError: true,\n        errMessage: \"無法與伺服器連線。\"\n      });\n    }\n\n    if (response.status === 200) {\n      this.setState(\n        {\n          ajaxError: false,\n          loading: false,\n          pharmacies: response.data.features,\n          availableNums: response.data.features.length\n        },\n        () => {\n          this.updateList({\n            searchString: this.lastSearchResult,\n            adultMaskAvailable: this.state.adultMaskAvailable,\n            childMaskAvailable: this.state.childMaskAvailable\n          });\n        }\n      );\n      return response.data.features.length;\n    }\n    return 0;\n  };\n\n  public updatePageNumber(newLength: number) {\n    this.setState({\n      pageNums: Math.ceil(newLength / this.state.pageSize)\n    });\n  }\n\n  public searchAddress = (address: string) => {\n    return () => {\n      const element = document.createElement(\"a\");\n      element.href = `https://maps.google.com?q=${address}`;\n      element.target = \"_blank\";\n      element.click();\n    };\n  };\n\n  public renderPharmacy = (pharmacy: Pharmacy) => {\n    return (\n      <Table.Row key={pharmacy.properties.id}>\n        <Table.Cell>{pharmacy.properties.name}</Table.Cell>\n        <Table.Cell>\n          {pharmacy.properties.address}\n          <Popup\n            content=\"點擊可切換到Google Map顯示位置\"\n            trigger={\n              <Icon\n                link\n                name=\"tag\"\n                style={{ marginLeft: \"0.5rem\" }}\n                onClick={this.searchAddress(pharmacy.properties.address)}\n              />\n            }\n          />\n        </Table.Cell>\n        <Table.Cell>{pharmacy.properties.phone}</Table.Cell>\n        <Table.Cell>{pharmacy.properties.mask_adult}</Table.Cell>\n        <Table.Cell>{pharmacy.properties.mask_child}</Table.Cell>\n        <Table.Cell>\n          {cleanDateString(pharmacy.properties.updated || \"\")}\n        </Table.Cell>\n      </Table.Row>\n    );\n  };\n\n  public renderPharmacyList = () => {\n    const startIndex = (this.state.currentPage - 1) * this.state.pageSize;\n    const endIndex =\n      this.state.currentPage * this.state.pageSize - 1 <\n      this.state.availableNums\n        ? this.state.currentPage * this.state.pageSize\n        : this.state.availableNums;\n    if (!this.state.notFoundError && this.state.pharmacies.length) {\n      if (!this.state.display.length) {\n        return (this.state.pharmacies as Pharmacy[])\n          .slice(startIndex, endIndex)\n          .map(this.renderPharmacy);\n      }\n      return this.state.display\n        .slice(startIndex, endIndex)\n        .map(index => this.renderPharmacy(this.state.pharmacies[index]));\n    }\n  };\n\n  public onSearchValueChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      searchValue: e.target.value\n    });\n  };\n\n  private toggleAdultMaskAvailable = () => {\n    this.updateList({\n      searchString: this.lastSearchResult,\n      childMaskAvailable: this.state.childMaskAvailable,\n      adultMaskAvailable: !this.state.adultMaskAvailable\n    });\n  };\n\n  private toggleChildrenMaskAvailable = () => {\n    this.updateList({\n      searchString: this.lastSearchResult,\n      childMaskAvailable: !this.state.childMaskAvailable,\n      adultMaskAvailable: this.state.adultMaskAvailable\n    });\n  };\n\n  public onSubmit = () => {\n    const val = this.state.searchValue.trim();\n    if (val) {\n      this.lastSearchResult = val;\n    } else {\n      delete this.lastSearchResult;\n    }\n    this.updateList({\n      searchString: val,\n      childMaskAvailable: this.state.childMaskAvailable,\n      adultMaskAvailable: this.state.adultMaskAvailable\n    });\n  };\n\n  public updateList(condition: Condition) {\n    const matchList: number[] = [];\n    (this.state.pharmacies as Pharmacy[]).forEach((pharmacy, index) => {\n      if (this.validatePharmacy(pharmacy, condition)) {\n        matchList.push(index);\n      }\n    });\n    this.setState({\n      childMaskAvailable: !!condition.childMaskAvailable,\n      adultMaskAvailable: !!condition.adultMaskAvailable,\n      display: matchList,\n      availableNums: matchList.length,\n      pageNums: matchList.length / this.state.pageSize,\n      startPage: 1,\n      currentPage: 1\n    });\n  }\n\n  private validatePharmacy(pharmacy: Pharmacy, condition: Condition): boolean {\n    let isValid: boolean = true;\n    if (condition.searchString && condition.searchString.length) {\n      isValid =\n        pharmacy.properties.address.includes(condition.searchString) ||\n        pharmacy.properties.name.includes(condition.searchString);\n    }\n    if (condition.adultMaskAvailable) {\n      isValid = isValid && pharmacy.properties.mask_adult > 0;\n    }\n    if (condition.childMaskAvailable) {\n      isValid = isValid && pharmacy.properties.mask_child > 0;\n    }\n\n    return isValid;\n  }\n\n  private sortByGeolocation = async () => {\n    try {\n      const location = await getPosition();\n      const { latitude, longitude } = location.coords;\n      const indexList = (this.state.display as number[]).slice();\n      const distanceMap = new Map<number, number>();\n      (this.state.display as number[]).forEach(index => {\n        const [plongitude, platitude] = (this.state.pharmacies as Pharmacy[])[\n          index\n        ].geometry.coordinates;\n        const distance = calcCrow(latitude, longitude, platitude, plongitude);\n        distanceMap.set(\n          (this.state.pharmacies as Pharmacy[])[index].properties.id,\n          distance\n        );\n      });\n      indexList.sort((index1, index2) => {\n        const ph1 = (this.state.pharmacies as Pharmacy[])[index1].properties.id;\n        const ph2 = (this.state.pharmacies as Pharmacy[])[index2].properties.id;\n        const ph1Distance = distanceMap.get(ph1) as number;\n        const ph2Distance = distanceMap.get(ph2) as number;\n        if (ph1Distance < ph2Distance) return -1;\n        if (ph1Distance === ph2Distance) return 0;\n        return 1;\n      });\n      this.setState({\n        display: indexList\n      });\n    } catch (err) {}\n  };\n\n  public get hasNext() {\n    return this.state.startPage + 4 < this.state.pageNums;\n  }\n\n  public get numberLeft() {\n    return this.state.pageNums - this.state.startPage + 1;\n  }\n\n  public getPageOptions = () => {\n    return [15, 25, 50].map(value => ({\n      key: value,\n      text: value.toString(),\n      value\n    }));\n  };\n\n  public onPageSizeChange = (\n    event: React.SyntheticEvent<HTMLElement, Event>,\n    data: DropdownProps\n  ) => {\n    this.setState({\n      pageSize: data.value as number,\n      currentPage: 1,\n      startPage: 1,\n      pageNums: Math.ceil(this.state.availableNums / (data.value as number))\n    });\n  };\n\n  public changePage = (i: number) => {\n    return () => {\n      this.setState({\n        currentPage: i\n      });\n    };\n  };\n\n  public renderPageItems(): JSX.Element[] {\n    const items: JSX.Element[] = [];\n    const max: number = this.hasNext\n      ? this.state.startPage + this.pageLimit\n      : this.state.startPage + (this.numberLeft as number);\n    for (let i = this.state.startPage; i < max; i++) {\n      items.push(\n        <Menu.Item\n          key={i}\n          active={this.state.currentPage === i}\n          onClick={this.changePage(i)}\n          as=\"a\"\n        >\n          {i}\n        </Menu.Item>\n      );\n    }\n    return items;\n  }\n\n  public previousPages = () => {\n    this.setState({\n      startPage: this.state.startPage - 5,\n      currentPage: this.state.startPage - 5\n    });\n  };\n\n  public nextPages = () => {\n    this.setState({\n      startPage: this.state.startPage + 5,\n      currentPage: this.state.startPage + 5\n    });\n  };\n\n  public toggleMapView = () => {\n    this.setState({\n      mapView: !this.state.mapView\n    });\n  };\n\n  public render() {\n    if (this.state.ajaxError) {\n      return (\n        <Segment>\n          <Message error>\n            <Message.Header>無法與伺服器連線</Message.Header>\n            <Message.Content>\n              發生錯誤的原因可能有以下：\n              <Message.List>\n                <Message.Item>\n                  口罩之亂已經結束，負責供應訊息的伺服器已經關閉。\n                </Message.Item>\n                <Message.Item>\n                  您的網路有問題，請您移致收訊好的地方。\n                </Message.Item>\n                <Message.Item>\n                  如果以上都無法解決您的問題，請聯繫 honesty1997@gmail.com\n                </Message.Item>\n              </Message.List>\n            </Message.Content>\n          </Message>\n        </Segment>\n      );\n    }\n    const table = (\n      <>\n        <Button\n          className=\"locate-icon\"\n          icon\n          labelPosition=\"left\"\n          color=\"facebook\"\n          onClick={this.sortByGeolocation}\n        >\n          定位最近的藥局\n          <Icon name=\"location arrow\" />\n        </Button>\n\n        <Button className=\"toggle-map-icon\" onClick={this.toggleMapView}>\n          切換Google地圖\n        </Button>\n        <Menu style={{ zIndex: 0 }} borderless fixed=\"top\" secondary>\n          <Menu.Item>\n            <Form onSubmit={this.onSubmit}>\n              <Input\n                onChange={this.onSearchValueChange}\n                action={{\n                  icon: \"search\",\n                  name: \"搜尋\",\n                  onClick: this.onSubmit\n                }}\n                placeholder=\"搜尋藥局名稱或地址\"\n              />\n            </Form>\n          </Menu.Item>\n        </Menu>\n        <Segment id=\"main\">\n          <Table celled>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell colSpan={5}>\n                  <Button\n                    color=\"blue\"\n                    inverted={!this.state.adultMaskAvailable}\n                    onClick={this.toggleAdultMaskAvailable}\n                  >\n                    尚有成人庫存\n                  </Button>\n                  <Button\n                    color=\"blue\"\n                    inverted={!this.state.childMaskAvailable}\n                    onClick={this.toggleChildrenMaskAvailable}\n                  >\n                    尚有孩童庫存\n                  </Button>\n                </Table.HeaderCell>\n                <Table.HeaderCell>\n                  每頁顯示\n                  <Dropdown\n                    inline\n                    onChange={this.onPageSizeChange}\n                    options={this.getPageOptions()}\n                    defaultValue={this.state.pageSize}\n                  />\n                  筆資料\n                </Table.HeaderCell>\n              </Table.Row>\n              <Table.Row>\n                <Table.HeaderCell>名稱</Table.HeaderCell>\n                <Table.HeaderCell>地址</Table.HeaderCell>\n                <Table.HeaderCell>電話</Table.HeaderCell>\n                <Table.HeaderCell>成人口罩庫存</Table.HeaderCell>\n                <Table.HeaderCell>兒童口罩庫存</Table.HeaderCell>\n                <Table.HeaderCell>資料最後更新時間</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>{this.renderPharmacyList()}</Table.Body>\n            <Table.Footer>\n              <Table.Row>\n                <Table.HeaderCell colSpan=\"6\">\n                  <Menu floated=\"right\" pagination>\n                    <Menu.Item\n                      as=\"a\"\n                      onClick={this.previousPages}\n                      icon\n                      disabled={this.state.startPage === 1}\n                    >\n                      <Icon name=\"chevron left\" />\n                    </Menu.Item>\n                    {this.renderPageItems()}\n                    <Menu.Item\n                      as=\"a\"\n                      onClick={this.nextPages}\n                      icon\n                      disabled={!this.hasNext}\n                    >\n                      <Icon name=\"chevron right\" />\n                    </Menu.Item>\n                  </Menu>\n                </Table.HeaderCell>\n              </Table.Row>\n            </Table.Footer>\n          </Table>\n        </Segment>\n      </>\n    );\n\n    return (\n      <>\n        <Dimmer active={this.state.loading} page>\n          <Loader />\n        </Dimmer>\n        {this.state.mapView ? (\n          <GoogleMap\n            toggleMapView={this.toggleMapView}\n            pharmacies={this.state.pharmacies}\n          />\n        ) : (\n          table\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/// <reference path=\".//index.d.ts\" />\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}