{"version":3,"sources":["util.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["cleanDateString","str","length","Date","toLocaleTimeString","calcCrow","lat1","lon1","lat2","lon2","dLat","toRad","dLon","lat1Rad","lat2Rad","a","Math","sin","cos","atan2","sqrt","Value","PI","App","timer","lastSearchResult","pageLimit","state","ajaxError","notFoundError","pharmacies","loading","searchValue","display","errMessage","adultMaskAvailable","childMaskAvailable","nearest","currentPage","pageSize","hasNext","startPage","numberLeft","availableNums","pageNums","fetchData","axios","get","response","status","setState","data","features","updateList","searchString","searchAddress","address","element","document","createElement","href","target","click","renderPharmacy","pharmacy","Table","Row","key","properties","id","Cell","name","Popup","content","trigger","Icon","link","style","marginLeft","onClick","phone","mask_adult","mask_child","updated","renderPharmacyList","startIndex","endIndex","slice","map","index","onSearchValueChange","e","value","toggleAdultMaskAvailable","toggleChildrenMaskAvailable","onSubmit","val","trim","sortByGeolocation","getPosition","location","coords","latitude","longitude","indexList","distanceMap","Map","forEach","geometry","coordinates","plongitude","platitude","distance","set","sort","index1","index2","ph1","ph2","ph1Distance","ph2Distance","getPageOptions","text","toString","onPageSizeChange","event","ceil","changePage","i","previousPages","nextPages","interval","this","pageNum","updatePageNumber","window","setInterval","clearInterval","newLength","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","condition","matchList","validatePharmacy","push","isValid","includes","items","max","Menu","Item","active","as","Dimmer","page","Loader","borderless","fixed","Form","Input","onChange","action","icon","placeholder","Button","basic","Segment","celled","Header","HeaderCell","colSpan","color","inverted","Dropdown","inline","options","defaultValue","Body","Footer","floated","pagination","disabled","renderPageItems","React","PureComponent","Boolean","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7cfbc5c5.chunk.js","sourcesContent":["export function cleanDateString(str: string): string {\r\n  if (str.length) {\r\n    return new Date(str).toLocaleTimeString();\r\n  }\r\n  return \"無\";\r\n}\r\n\r\nexport function calcCrow(\r\n  lat1: number,\r\n  lon1: number,\r\n  lat2: number,\r\n  lon2: number\r\n): number {\r\n  const R = 6371; // km\r\n  const dLat = toRad(lat2 - lat1);\r\n  const dLon = toRad(lon2 - lon1);\r\n  const lat1Rad = toRad(lat1);\r\n  const lat2Rad = toRad(lat2);\r\n\r\n  const a =\r\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n    Math.sin(dLon / 2) *\r\n      Math.sin(dLon / 2) *\r\n      Math.cos(lat1Rad) *\r\n      Math.cos(lat2Rad);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  const d = R * c;\r\n  return d;\r\n}\r\n\r\nfunction toRad(Value: number): number {\r\n  return (Value * Math.PI) / 180;\r\n}\r\n","import axios from \"axios\";\nimport React from \"react\";\nimport {\n  Button,\n  Dimmer,\n  Dropdown,\n  Icon,\n  DropdownProps,\n  Form,\n  Loader,\n  Input,\n  Menu,\n  Popup,\n  Segment,\n  Table\n} from \"semantic-ui-react\";\n\nimport { cleanDateString, calcCrow } from \"./util\";\n\nimport \"./App.css\";\n\ntype PharmacyAjaxResponse = {\n  type: string;\n  features: Pharmacy[];\n};\n\ntype Pharmacy = {\n  type: string;\n  properties: PharmacyProps;\n  geometry: Geometry;\n};\n\ntype PharmacyProps = {\n  id: number;\n  name: string;\n  phone: string;\n  address: string;\n  mask_adult: number;\n  mask_child: number;\n  updated?: string;\n  available: string;\n  mark_adult: number;\n  mark_child: number;\n};\n\ntype Geometry = {\n  type: string;\n  coordinates: number[];\n};\n\ntype State = {\n  pharmacies: Pharmacy[];\n  ajaxError: boolean;\n  loading: boolean;\n  searchValue: string;\n  display: number[];\n  errMessage: string;\n  adultMaskAvailable: boolean;\n  childMaskAvailable: boolean;\n  nearest: boolean;\n  currentPage: number;\n  pageSize: number;\n  hasNext: boolean;\n  startPage: number;\n  numberLeft: number;\n  availableNums: number;\n  pageNums: number;\n};\n\ntype Condition = {\n  childMaskAvailable?: boolean;\n  adultMaskAvailable?: boolean;\n  searchString?: string;\n};\n\nclass App extends React.PureComponent<{}, State> {\n  public timer?: number;\n  public lastSearchResult: string = \"\";\n  public pageLimit: number = 5;\n\n  public state = {\n    ajaxError: false,\n    notFoundError: false,\n    pharmacies: [],\n    loading: true,\n    searchValue: \"\",\n    display: [],\n    errMessage: \"\",\n    adultMaskAvailable: false,\n    childMaskAvailable: false,\n    nearest: false,\n    currentPage: 1,\n    pageSize: 15,\n    hasNext: false,\n    startPage: 1,\n    numberLeft: 0,\n    availableNums: 0,\n    pageNums: 0\n  };\n\n  public async componentDidMount() {\n    // fetch data every 3 minutes.\n    const interval = 3 * 60 * 1000;\n    const pageNum = await this.fetchData();\n    this.updatePageNumber(pageNum);\n    this.timer = window.setInterval(this.fetchData, interval);\n  }\n\n  public componentWillUnmount() {\n    clearInterval(this.timer);\n    delete this.timer;\n  }\n\n  public fetchData = async () => {\n    const response = await axios.get<PharmacyAjaxResponse>(\n      \"https://raw.githubusercontent.com/kiang/pharmacies/master/json/points.json\"\n    );\n\n    if (response.status >= 400) {\n      this.setState({\n        ajaxError: true,\n        errMessage: \"無法與伺服器連線。\"\n      });\n    }\n\n    if (response.status === 200) {\n      this.setState(\n        {\n          ajaxError: false,\n          loading: false,\n          pharmacies: response.data.features,\n          availableNums: response.data.features.length\n        },\n        () => {\n          this.updateList({\n            searchString: this.lastSearchResult,\n            adultMaskAvailable: this.state.adultMaskAvailable,\n            childMaskAvailable: this.state.childMaskAvailable\n          });\n        }\n      );\n      return response.data.features.length;\n    }\n    return 0;\n  };\n\n  public updatePageNumber(newLength: number) {\n    this.setState({\n      pageNums: Math.ceil(newLength / this.state.pageSize)\n    });\n  }\n\n  public getPosition(): Promise<Position> {\n    return new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(resolve, reject);\n    });\n  }\n\n  public searchAddress = (address: string) => {\n    return () => {\n      const element = document.createElement(\"a\");\n      element.href = `https://maps.google.com?q=${address}`;\n      element.target = \"_blank\";\n      element.click();\n    };\n  };\n\n  public renderPharmacy = (pharmacy: Pharmacy) => {\n    return (\n      <Table.Row key={pharmacy.properties.id}>\n        <Table.Cell>{pharmacy.properties.name}</Table.Cell>\n        <Table.Cell>\n          {pharmacy.properties.address}\n          <Popup\n            content=\"點擊可切換到Google Map顯示位置\"\n            trigger={\n              <Icon\n                link\n                name=\"tag\"\n                style={{ marginLeft: \"0.5rem\" }}\n                onClick={this.searchAddress(pharmacy.properties.address)}\n              />\n            }\n          />\n        </Table.Cell>\n        <Table.Cell>{pharmacy.properties.phone}</Table.Cell>\n        <Table.Cell>{pharmacy.properties.mask_adult}</Table.Cell>\n        <Table.Cell>{pharmacy.properties.mask_child}</Table.Cell>\n        <Table.Cell>\n          {cleanDateString(pharmacy.properties.updated || \"\")}\n        </Table.Cell>\n      </Table.Row>\n    );\n  };\n\n  public renderPharmacyList = () => {\n    const startIndex = (this.state.currentPage - 1) * this.state.pageSize;\n    const endIndex =\n      this.state.currentPage * this.state.pageSize - 1 <\n      this.state.availableNums\n        ? this.state.currentPage * this.state.pageSize\n        : this.state.availableNums;\n    if (!this.state.notFoundError && this.state.pharmacies.length) {\n      if (!this.state.display.length) {\n        return (this.state.pharmacies as Pharmacy[])\n          .slice(startIndex, endIndex)\n          .map(this.renderPharmacy);\n      }\n      return this.state.display\n        .slice(startIndex, endIndex)\n        .map(index => this.renderPharmacy(this.state.pharmacies[index]));\n    }\n  };\n\n  public onSearchValueChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      searchValue: e.target.value\n    });\n  };\n\n  private toggleAdultMaskAvailable = () => {\n    this.updateList({\n      searchString: this.lastSearchResult,\n      childMaskAvailable: this.state.childMaskAvailable,\n      adultMaskAvailable: !this.state.adultMaskAvailable\n    });\n  };\n\n  private toggleChildrenMaskAvailable = () => {\n    this.updateList({\n      searchString: this.lastSearchResult,\n      childMaskAvailable: !this.state.childMaskAvailable,\n      adultMaskAvailable: this.state.adultMaskAvailable\n    });\n  };\n\n  public onSubmit = () => {\n    const val = this.state.searchValue.trim();\n    if (val) {\n      this.lastSearchResult = val;\n    } else {\n      delete this.lastSearchResult;\n    }\n    this.updateList({\n      searchString: val,\n      childMaskAvailable: this.state.childMaskAvailable,\n      adultMaskAvailable: this.state.adultMaskAvailable\n    });\n  };\n\n  public updateList(condition: Condition) {\n    const matchList: number[] = [];\n    (this.state.pharmacies as Pharmacy[]).forEach((pharmacy, index) => {\n      if (this.validatePharmacy(pharmacy, condition)) {\n        matchList.push(index);\n      }\n    });\n    this.setState({\n      childMaskAvailable: !!condition.childMaskAvailable,\n      adultMaskAvailable: !!condition.adultMaskAvailable,\n      display: matchList,\n      availableNums: matchList.length,\n      pageNums: matchList.length / this.state.pageSize,\n      startPage: 1,\n      currentPage: 1\n    });\n  }\n\n  private validatePharmacy(pharmacy: Pharmacy, condition: Condition): boolean {\n    let isValid: boolean = true;\n    if (condition.searchString && condition.searchString.length) {\n      isValid =\n        pharmacy.properties.address.includes(condition.searchString) ||\n        pharmacy.properties.name.includes(condition.searchString);\n    }\n    if (condition.adultMaskAvailable) {\n      isValid = isValid && pharmacy.properties.mask_adult > 0;\n    }\n    if (condition.childMaskAvailable) {\n      isValid = isValid && pharmacy.properties.mask_child > 0;\n    }\n\n    return isValid;\n  }\n\n  private sortByGeolocation = async () => {\n    try {\n      const location = await this.getPosition();\n      const { latitude, longitude } = location.coords;\n      const indexList = (this.state.display as number[]).slice();\n      const distanceMap = new Map<number, number>();\n      (this.state.display as number[]).forEach(index => {\n        const [plongitude, platitude] = (this.state.pharmacies as Pharmacy[])[\n          index\n        ].geometry.coordinates;\n        const distance = calcCrow(latitude, longitude, platitude, plongitude);\n        distanceMap.set(\n          (this.state.pharmacies as Pharmacy[])[index].properties.id,\n          distance\n        );\n      });\n      indexList.sort((index1, index2) => {\n        const ph1 = (this.state.pharmacies as Pharmacy[])[index1].properties.id;\n        const ph2 = (this.state.pharmacies as Pharmacy[])[index2].properties.id;\n        const ph1Distance = distanceMap.get(ph1) as number;\n        const ph2Distance = distanceMap.get(ph2) as number;\n        if (ph1Distance < ph2Distance) return -1;\n        if (ph1Distance === ph2Distance) return 0;\n        return 1;\n      });\n      this.setState({\n        display: indexList\n      });\n    } catch (err) {}\n  };\n\n  public get hasNext() {\n    return this.state.startPage + 4 < this.state.pageNums;\n  }\n\n  public get numberLeft() {\n    return this.state.pageNums - this.state.startPage + 1;\n  }\n\n  public getPageOptions = () => {\n    return [15, 25, 50].map(value => ({\n      key: value,\n      text: value.toString(),\n      value\n    }));\n  };\n\n  public onPageSizeChange = (\n    event: React.SyntheticEvent<HTMLElement, Event>,\n    data: DropdownProps\n  ) => {\n    this.setState({\n      pageSize: data.value as number,\n      currentPage: 1,\n      startPage: 1,\n      pageNums: Math.ceil(this.state.availableNums / (data.value as number))\n    });\n  };\n\n  public changePage = (i: number) => {\n    return () => {\n      this.setState({\n        currentPage: i\n      });\n    };\n  };\n\n  public renderPageItems(): JSX.Element[] {\n    const items: JSX.Element[] = [];\n    const max: number = this.hasNext\n      ? this.state.startPage + this.pageLimit\n      : this.state.startPage + (this.numberLeft as number);\n    for (let i = this.state.startPage; i < max; i++) {\n      items.push(\n        <Menu.Item\n          key={i}\n          active={this.state.currentPage === i}\n          onClick={this.changePage(i)}\n          as=\"a\"\n        >\n          {i}\n        </Menu.Item>\n      );\n    }\n    return items;\n  }\n\n  public previousPages = () => {\n    this.setState({\n      startPage: this.state.startPage - 5,\n      currentPage: this.state.startPage - 5\n    });\n  };\n\n  public nextPages = () => {\n    this.setState({\n      startPage: this.state.startPage + 5,\n      currentPage: this.state.startPage + 5\n    });\n  };\n\n  public render() {\n    return (\n      <>\n        <Dimmer active={this.state.loading} page>\n          <Loader />\n        </Dimmer>\n        <Menu borderless fixed=\"top\">\n          <Menu.Item>\n            <Form onSubmit={this.onSubmit}>\n              <Input\n                onChange={this.onSearchValueChange}\n                action={{\n                  icon: \"search\",\n                  name: \"搜尋\",\n                  onClick: this.onSubmit\n                }}\n                placeholder=\"搜尋藥局名稱或地址\"\n              />\n            </Form>\n          </Menu.Item>\n          <Menu.Item style={{ marginLeft: \"1.6rem\" }}>\n            <Button onClick={this.sortByGeolocation} basic>\n              距離現在位置最近\n            </Button>\n          </Menu.Item>\n        </Menu>\n        <Segment id=\"main\">\n          <Table celled>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell colSpan={5}>\n                  <Button\n                    color=\"blue\"\n                    inverted={!this.state.adultMaskAvailable}\n                    onClick={this.toggleAdultMaskAvailable}\n                  >\n                    尚有成人庫存\n                  </Button>\n                  <Button\n                    color=\"blue\"\n                    inverted={!this.state.childMaskAvailable}\n                    onClick={this.toggleChildrenMaskAvailable}\n                  >\n                    尚有孩童庫存\n                  </Button>\n                </Table.HeaderCell>\n                <Table.HeaderCell>\n                  每頁顯示\n                  <Dropdown\n                    inline\n                    onChange={this.onPageSizeChange}\n                    options={this.getPageOptions()}\n                    defaultValue={this.state.pageSize}\n                  />\n                  筆資料\n                </Table.HeaderCell>\n              </Table.Row>\n              <Table.Row>\n                <Table.HeaderCell>名稱</Table.HeaderCell>\n                <Table.HeaderCell>地址</Table.HeaderCell>\n                <Table.HeaderCell>電話</Table.HeaderCell>\n                <Table.HeaderCell>成人口罩庫存</Table.HeaderCell>\n                <Table.HeaderCell>兒童口罩庫存</Table.HeaderCell>\n                <Table.HeaderCell>資料最後更新時間</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>{this.renderPharmacyList()}</Table.Body>\n            <Table.Footer>\n              <Table.Row>\n                <Table.HeaderCell colSpan=\"6\">\n                  <Menu floated=\"right\" pagination>\n                    <Menu.Item\n                      as=\"a\"\n                      onClick={this.previousPages}\n                      icon\n                      disabled={this.state.startPage === 1}\n                    >\n                      <Icon name=\"chevron left\" />\n                    </Menu.Item>\n                    {this.renderPageItems()}\n                    <Menu.Item\n                      as=\"a\"\n                      onClick={this.nextPages}\n                      icon\n                      disabled={!this.hasNext}\n                    >\n                      <Icon name=\"chevron right\" />\n                    </Menu.Item>\n                  </Menu>\n                </Table.HeaderCell>\n              </Table.Row>\n            </Table.Footer>\n          </Table>\n        </Segment>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}